1.git config 配置命令
要检查已有的配置信息，可以使用 git config --list 命令

2.在工作目录中初始化新仓库
git init
初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中.

3.从现有仓库克隆
克隆仓库的命令格式为 git clone [url]。Git 支持许多数据传输协议。之前的例子使用的是 git:// 协议，不过你也可以用 http(s):// 或者user@server:/path.git 表示的 SSH 传输协议.

4.检查当前文件状态
git status 命令

5.跟踪新文件
使用命令 git add 开始跟踪一个新文件.

6.忽略某些文件
一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。
文件 .gitignore 的格式规范如下：
所有空行或者以注释符号 ＃ 开头的行都会被 Git 忽略。
可以使用标准的 glob 模式匹配。 * 匹配模式最后跟反斜杠（/）说明要忽略的是目录。 * 要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

7.查看变化
要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff，此命令比较的是工作目录中当前文件和暂存区域快照之间的差异，也就是修改之后还没有暂存起来的变化内容。
若要看已经暂存起来的文件和上次提交时的快照之间的差异，可以用 git diff --cached 命令。

8.提交更新
 git commit
这种方式会启动文本编辑器以便输入本次提交的说明。可以看到，默认的提交消息包含最后一次运行 git status 的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。
另外也可以用 -m 参数后跟提交说明的方式，在一行命令中提交更新.

9.跳过使用暂存区域
Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上-a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤.

10.移除文件
git rm
要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。可以用 git rm 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母），以防误删除文件后丢失修改的内容。另外一种情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。换句话说，仅是从跟踪清单中删除。可以用--cached 选项即可。

11.移动文件
git mv file_from file_to
其实，运行 git mv 就相当于运行了下面三条命令：
mv README.txt README
git rm README.txt
git add README

12.查看提交历史
git log 
默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面。
我们常用 -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新.
还有许多摘要选项可以用，比如 --stat，仅显示简要的增改行数统计.还有个常用的 --pretty 选项，可以指定使用完全不同于默认格式的方式展示提交历史。比如用oneline 将每个提交放在一行显示，这在提交数很大时非常有用。

13.撤消操作
修改最后一次提交
想要撤消刚才的提交操作，可以使用 --amend 选项重新提交，
git commit --amend
此命令将使用当前的暂存区域快照提交。
如果刚才提交时忘了暂存某些修改，可以先补上暂存操作，然后再运行 --amend 提交。
取消已经暂存的文件
可以使用 git reset HEAD ... 的方式取消暂存
取消对文件的修改
git checkout --
记住，任何已经提交到 Git 的都可以被恢复。即便在已经删除的分支中的提交，或者用 --amend 重新改写的提交，都可以被恢复。你可能失去的数据，仅限于没有提交过的，对 Git 来说它们就像从未存在过一样。

14. 远程仓库的使用
查看当前的远程库
要查看当前配置有哪些远程仓库，可以用 git remote 命令.
在克隆完某个项目后，至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库.也可以加上 -v 选项，显示对应的克隆地址。

添加远程仓库
要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，运行 git remote add [shortname] [url]

从远程仓库抓取数据
可以用下面的命令从远程仓库抓取数据到本地，
git fetch [remote-name]
有一点很重要，需要记住，fetch 命令只是将远端的数据拉到本地仓库，并不自动合并到当前工作分支，只有当你确实准备好了，才能手工合并。
如果设置了某个分支用于跟踪某个远端仓库的分支，可以使用 git pull 命令自动抓取数据下来，然后将远端分支自动合并到本地仓库中当前分支。实际上，默认情况下git clone 命令本质上就是自动创建了本地的 master 分支用于跟踪远程仓库中的 master 分支（假设远程仓库确实有 master 分支）。所以一般我们运行git pull，目的都是要从原始克隆的远端仓库中抓取数据后，合并到工作目录中的当前分支。

推送数据到远程仓库
git push [remote-name] [branch-name]。如果要把本地的 master 分支推送到origin 服务器上，可以使用 git push origin master 
如有冲突的话，可以加-f选项，强制推送。或是先下载下来，再合并，再推送上去。

查看远程仓库信息
我们可以通过命令 git remote show [remote-name] 查看某个远程仓库的详细信息

远程仓库的删除和重命名
在新版 Git 中可以用 git remote rename 命令修改某个远程仓库在本地的简短名称
需要移除对应的远端仓库，可以运行 git remote rm 命令。










1.如果你运行git add时加上-i或者--interactive选项，Git就进入了一个交互式的shell模式.你可以不通过交互式增加的模式来实现部分文件暂存——你可以在命令行下通过git add -p或者git add --patch来启动同样的脚本。

2.git stash命令.“‘储藏”“可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。你的变更都保存在栈上。要查看现有的储藏，你可以使用 git stash list.你可以重新应用你刚刚实施的储藏，所采用的命令就是之前在原始的 stash 命令的帮助输出里提示的：git stash apply。如果你想应用更早的储藏，你可以通过名字指定它，像这样：git stash apply stash@{2}。如果你不指明，Git 默认使用最近的储藏并尝试应用它.apply 选项只尝试应用储藏的工作——储藏的内容仍然在栈上。要移除它，你可以运行 git stash drop，加上你希望移除的储藏的名字.
从存储中创建分支：如果你想用更方便的方法来重新检验你储藏的变更，你可以运行git stash branch，这会创建一个新的分支，检出你储藏工作时的所处的提交，重新应用你的工作，如果成功，将会丢弃储藏。

3.重写历史
改变最近一次提交：
如果你只想修改最近一次提交说明，这非常简单：git commit --amend。这会把你带入文本编辑器，里面包含了你最近一次提交说明，供你修改。当你保存并退出编辑器，这个编辑器会写入一个新的提交，里面包含了那个说明，并且让它成为你的新的最近一次提交。

修改多个提交说明：
Git没有一个修改历史的工具，但是你可以使用rebase工具来衍合一系列的提交到它们原来所在的HEAD上而不是移到新的上。依靠这个交互式的rebase工具，你就可以停留在每一次提交后，如果你想修改或改变说明、增加文件或任何其他事情。你可以通过给git rebase增加-i选项来以交互方式地运行rebase。你必须通过告诉命令衍合到哪次提交，来指明你需要重写的提交的回溯深度。你需要修改这个脚本来让它停留在你想修改的变更上。要做到这一点，你只要将你想修改的每一次提交前面的pick改为edit。当你保存并退出编辑器，Git会倒回至列表中的最后一次提交，然后把你送到命令行中。

从所有提交中删除一个文件：
filter-branch大概会是你用来清理整个历史的工具。要从整个历史中删除一个名叫password.txt的文件，你可以在filter-branch上使用--tree-filter选项：git filter-branch --tree-filter 'rm -f passwords.txt' HEAD。--tree-filter选项会在每次检出项目时先执行指定的命令然后重新提交结果。要在你所有的分支上运行filter-branch的话，你可以传递一个--all给命令。

4.使用 Git 调试
文件标注：
如果你在追踪代码中的缺陷想知道这是什么时候为什么被引进来的，文件标注会是你的最佳工具。它会显示文件中对每一行进行修改的最近一次提交。因此，如果你发现自己代码中的一个方法存在缺陷，你可以用git blame来标注文件，查看那个方法的每一行分别是由谁在哪一天修改的。

5.子模块
Git 通过子模块处理这个问题。子模块允许你将一个 Git 仓库当作另外一个Git仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。你通过git submodule add将外部项目加为子模块：
这是关于子模块的重要一点：你记录他们当前确切所处的提交。你不能记录一个子模块的master或者其他的符号引用。



